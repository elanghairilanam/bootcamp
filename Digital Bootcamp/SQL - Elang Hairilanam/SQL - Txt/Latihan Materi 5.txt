1.SELECT order_id, cast(sum((quantity * unit_price)-(quantiry * unit_price * discount))
AS decimal(10,2)) AS subtotal
FROM order_details
GROUP BY order_id
ORDER BY order_id

2.SELECT O.shipped_date, O.order_id, cast(sum((D.quantity * D.unit_price) - (D.quantity * D.unit_price * D.discount))
AS decimal(10,2)) AS subtotal, extract(year FROM O.shipped_date) as year
FROM order_details D
INNER JOIN orders O on D.order_id = O.order_id
WHERE O.shipped_date >= '1996-12-24' AND O.shipped_date <= '1997-09-30'
GROUP BY O.order_id
ORDER BY O.shipped_date

3.SELECT product_id, product_name, supplier_id, category_id,quantity_per_unit, unit_price
FROM products
ORDER BY product_name

4.SELECT product_id, product_name
FROM products
ORDER BY product_name

5.SELECT D.order_id, P.product_name, D.unit_price, D.quantity, D.discount, cast(sum((D.quantity * D.unit_price) - (D.quantity * D.unit_price * D.discount))
AS decimal(10,2)) AS ExtendedPrice
FROM order_details D
INNER JOIN products P ON D.product_id = P.product_id
GROUP BY D.order_id, P.product_name, D.unit_price, D.quantity, D.discount
ORDER BY D.order_id

6.SELECT c.category_id, c.category_name, p.product_name,
cast(sum((D.quantity * D.unit_price) - (D.quantity * D.unit_price * D.discount))
AS decimal(10,2)) AS ProductSales
FROM categories c
INNER JOIN products p ON c.category_id = p.category_id
INNER JOIN order_details d ON p.product_id = d.product_id
INNER JOIN orders o ON o.order_id = d.order_id
WHERE extract(year FROM o.order_date) = '1997'
GROUP BY c.category_id, c.category_name, p.product_name
ORDER BY c.category_name, p.product_name

7. SELECT product_name AS "Ten_Most_Expensive_Product", unit_price AS "UnitPrice"
FROM products
ORDER BY unit_price desc
limit 10

8.SELECT c.category_name, p.product_name, p.quantity_per_unit, p.units_in_stock,
CASE
WHEN p.discontinued = 1 THEN 'y'
WHEN p.discontinued = 0 THEN 'n'
END AS discontinued
FROM products p
INNER JOIN categories c on p.category_id = c.category_id
ORDER BY c.category_name, p.product_name

9.SELECT city, company_name, contact_name,
CASE
WHEN customer_id IS Null THEN 'Suppliers'
WHEN customer_id IS NOT Null THEN 'Customers'
END AS "Relationship"
FROM customers
UNION ALL
SELECT city, company_name, contact_name,
CASE
WHEN supplier_id IS Null THEN 'Customers'
WHEN supplier_id IS NOT Null THEN 'Suppliers'
END AS "Relationship"
FROM suppliers
ORDER BY city

10.SELECT e.country, e.last_name, e.first_name, o.shipped_date, o.order_id,
cast(sum((D.quantity * D.unit_price) - (D.quantity * D.unit_price * D.discount))
AS decimal(10,2)) AS "Sale_Amount"
FROM employees e
INNER JOIN orders o ON e.employee_id = o.employee_id
INNER JOIN order_details d ON o.order_id = d.order_id
WHERE extract(year FROM o.shipped_date) = '1997'
GROUP BY e.country, e.last_name, e.first_name, o.shipped_date, o.order_id
ORDER BY e.country, e.last_name, e.first_name, o.shipped_date

11. SELECT product_name, unit_price
FROM products
WHERE unit_price > (SELECT AVG(total)
FROM (SELECT SUM(unit_price) AS total
FROM products
GROUP BY product_name) AS average)
ORDER BY unit_price

12. SELECT c.category_name, p.product_name,
cast(sum((D.quantity * D.unit_price) - (D.quantity * D.unit_price * D.discount))
AS decimal(10,2)) AS ProductSales,
concat('QTR', ' ', extract(quarter FROM o.shipped_date)) AS ShippedQuarter
FROM products p
JOIN categories c ON p.category_id = c.category_id
JOIN order_details d ON p.product_id = d.product_id
JOIN orders o ON d.order_id = o.order_id
WHERE extract(year FROM o.shipped_date) = '1997'
GROUP BY ShippedQuarter, c.category_name, p.product_name
ORDER BY c.category_name, p.product_name

13.SELECT c.category_name,
cast(sum((D.quantity * D.unit_price) - (D.quantity * D.unit_price * D.discount))
AS decimal(10,2)) AS CategorySales
FROM categories c
JOIN products p ON c.category_id = p.category_id
JOIN order_details d ON p.product_id = d.product_id
JOIN orders o ON d.order_id = o.order_id
WHERE extract(year FROM o.shipped_date) = '1997'
GROUP BY c.category_name
ORDER BY c.category_name

14.SELECT p.product_name, c.company_name, extract(year FROM o.order_date) as OrderYear,
case
when extract(quarter FROM o.order_date) = '1' then cast(sum((D.quantity * D.unit_price) - (D.quantity * D.unit_price * D.discount))
AS decimal(10,2))
else '0'
end as "Qtr 1",
case
when extract(quarter FROM o.order_date) = '2' then cast(sum((D.quantity * D.unit_price) - (D.quantity * D.unit_price * D.discount))
AS decimal(10,2))
else '0'
end as "Qtr 2",
case
when extract(quarter FROM o.order_date) = '3' then cast(sum((D.quantity * D.unit_price) - (D.quantity * D.unit_price * D.discount))
AS decimal(10,2))
else '0'
end as "Qtr 3",
case
when extract(quarter FROM o.order_date) = '4' then cast(sum((D.quantity * D.unit_price) - (D.quantity * D.unit_price * D.discount))
AS decimal(10,2))
else '0'
end as "Qtr 4"
FROM customers c
INNER JOIN orders o on o.customer_id = c.customer_id
INNER JOIN order_details d on d.order_id = o.order_id
INNER JOIN products p on p.product_id = d.product_id
WHERE extract(year FROM o.order_date) = '1997'
GROUP BY p.product_name, c.company_name, o.order_date

15.SELECT c.category_name as product_category,
case
when s.country in ('USA','Brazil','Canada') then 'America'
when s.country in ('Australia','Japan','Singapore') then 'Asia Pacific'
else 'Europe'
end as supplier_continent,
sum(p.units_in_stock) as unit_in_stock
FROM categories c
INNER JOIN products p on c.category_id = p.category_id
INNER JOIN suppliers s on p.supplier_id = s.supplier_id
GROUP BY c.category_name, supplier_continent
ORDER BY c.category_name